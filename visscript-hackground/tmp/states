Starting parse
Entering state 0
Reading a token: 
Line: 0 Column: 3
AVS: Identifier: xts
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 0 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 0 Column: 8
AVS: Identifier: rand
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 0 Column: 9
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 0 Column: 11
AVS: Constant: 10.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 10 18 1 12
Entering state 27
Reading a token: 
Line: 0 Column: 12
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 10 18
Entering state 30
Reading a token: 
Line: 0 Column: 13
AVS: Punctuator: '/'
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 0 Column: 16
AVS: Constant: 100.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 10 18 30 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 10 18 30 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 10 18
Entering state 30
Reading a token: 
Line: 0 Column: 17
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 0 Column: 21
AVS: Constant: 0.050000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 10 18 30 22
Entering state 34
Reading a token: 
Line: 0 Column: 22
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0
Entering state 9
Reducing stack by rule 3 (line 32), statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 1 Column: 3
AVS: Identifier: yts
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 1 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 1 Column: 8
AVS: Identifier: rand
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 1 Column: 9
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 1 Column: 11
AVS: Constant: 10.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Reading a token: 
Line: 1 Column: 12
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 1 Column: 13
AVS: Punctuator: '/'
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 1 Column: 16
AVS: Constant: 100.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 1 Column: 17
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 1 Column: 21
AVS: Constant: 0.050000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Reading a token: 
Line: 1 Column: 22
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 2 Column: 3
AVS: Identifier: xtd
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 2 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 2 Column: 8
AVS: Identifier: rand
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 2 Column: 9
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 2 Column: 11
AVS: Constant: 10.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Reading a token: 
Line: 2 Column: 12
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 2 Column: 13
AVS: Punctuator: '/'
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 2 Column: 16
AVS: Constant: 100.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 2 Column: 17
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 2 Column: 21
AVS: Constant: 0.050000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Reading a token: 
Line: 2 Column: 22
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 4 Column: 1
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 4 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 4 Column: 3
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 4 Column: 4
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 4 Column: 8
AVS: Constant: 0.025000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 4 Column: 9
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 4 Column: 12
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 4 Column: 13
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 4 Column: 14
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 4 Column: 15
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 4 Column: 16
AVS: Constant: 2.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Reading a token: 
Line: 4 Column: 17
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 4 Column: 18
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 6
Reading a token: 
Line: 4 Column: 19
AVS: Constant: 1.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6
Entering state 15
Reading a token: 
Line: 4 Column: 20
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 4 Column: 23
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 4 Column: 24
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 4 Column: 27
AVS: Identifier: xtd
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 4 Column: 28
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 21 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 21 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 21 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 21
Entering state 33
Reading a token: 
Line: 4 Column: 29
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6
Entering state 15
Next token is token ')' ()
Shifting token ')', Entering state 29
Reducing stack by rule 18 (line 52), '(' expr ')' -> expr
PP: (expr)
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Reading a token: 
Line: 4 Column: 30
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 4 Column: 32
AVS: Identifier: xt
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 4 Column: 33
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 21
Entering state 33
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 4 Column: 34
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 4 Column: 35
AVS: Constant: 2.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 4 Column: 36
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 5 Column: 1
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 5 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 5 Column: 3
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 5 Column: 4
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 5 Column: 8
AVS: Constant: 0.025000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 5 Column: 9
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 5 Column: 12
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 5 Column: 13
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 5 Column: 14
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 5 Column: 15
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 5 Column: 16
AVS: Constant: 2.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Reading a token: 
Line: 5 Column: 17
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 5 Column: 18
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 6
Reading a token: 
Line: 5 Column: 19
AVS: Constant: 2.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6
Entering state 15
Reading a token: 
Line: 5 Column: 20
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 5 Column: 23
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 5 Column: 24
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 5 Column: 27
AVS: Identifier: ytd
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 5 Column: 28
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 22 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 22 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 22 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6 15 22
Entering state 34
Reading a token: 
Line: 5 Column: 29
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18 30 21 33 23 1 12 27 23 6
Entering state 15
Next token is token ')' ()
Shifting token ')', Entering state 29
Reducing stack by rule 18 (line 52), '(' expr ')' -> expr
PP: (expr)
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Reading a token: 
Line: 5 Column: 30
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 5 Column: 32
AVS: Identifier: yt
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 5 Column: 33
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 21
Entering state 33
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 5 Column: 34
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 5 Column: 35
AVS: Constant: 2.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 5 Column: 36
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 7 Column: 1
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 7 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 7 Column: 3
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 7 Column: 4
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 7 Column: 11
AVS: Constant: 3.141590
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 7 Column: 12
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 7 Column: 14
AVS: Constant: 23.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 7 Column: 15
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 7 Column: 16
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 7 Column: 17
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 8 Column: 1
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 8 Column: 3
AVS: Identifier: v
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 4
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 8 Column: 7
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 8
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 8 Column: 9
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 10
AVS: Punctuator: '/'
Next token is token '/' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12
Entering state 27
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 8 Column: 12
AVS: Constant: 34.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23 1 12 27 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12 27 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18 30 23 1 12
Entering state 27
Reading a token: 
Line: 8 Column: 13
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 8 Column: 14
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 15
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12 27 21
Entering state 33
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 30 23 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 23 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 8 Column: 16
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 8 Column: 19
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 20
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 8 Column: 21
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 22
AVS: Punctuator: '-'
Next token is token '-' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 1 12
Entering state 27
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 8 Column: 23
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 24
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 1 12 27 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 1 12 27 22
Entering state 34
Next token is token ')' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18 30 21 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 8 Column: 25
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 8 Column: 26
AVS: Constant: 3.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 8 Column: 27
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 8 Column: 29
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 30
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 8 Column: 31
AVS: Identifier: v
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 32
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 8 Column: 35
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 36
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 8 Column: 37
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 38
AVS: Punctuator: '/'
Next token is token '/' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12
Entering state 27
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 8 Column: 40
AVS: Constant: 34.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23 1 12 27 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12 27 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18 30 23 1 12
Entering state 27
Reading a token: 
Line: 8 Column: 41
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 8 Column: 42
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 43
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12 27 21
Entering state 33
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 30 23 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 23 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 8 Column: 44
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 8 Column: 47
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 48
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 8 Column: 49
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 50
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 1 12
Entering state 27
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 8 Column: 51
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 8 Column: 52
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 1 12 27 21
Entering state 33
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 30 21 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 8 Column: 53
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 9 Column: 3
AVS: Identifier: red
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 9 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 9 Column: 7
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 9 Column: 8
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 9 Column: 9
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 9 Column: 10
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 9 Column: 11
AVS: Constant: 3.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 1 12
Entering state 27
Reading a token: 
Line: 9 Column: 12
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 9 Column: 13
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 10 Column: 5
AVS: Identifier: green
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 10 Column: 6
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 10 Column: 7
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 10 Column: 8
AVS: Punctuator: '-'
Next token is token '-' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 10 Column: 10
AVS: Constant: 0.300000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Reading a token: 
Line: 10 Column: 11
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 11 Column: 4
AVS: Identifier: blue
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 11 Column: 5
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 11 Column: 8
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 11 Column: 9
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 11 Column: 10
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 11 Column: 11
AVS: Punctuator: '/'
Next token is token '/' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 11 Column: 12
AVS: Constant: 3.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12 27 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18 1 12
Entering state 27
Reading a token: 
Line: 11 Column: 13
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 11 Column: 14
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 11 Column: 15
AVS: Constant: 1.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 11 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 13 Column: 1
AVS: Identifier: u
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 13 Column: 3
AVS: Identifier: u
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 4
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 13 Column: 6
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 13 Column: 7
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 13 Column: 8
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 9
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 13 Column: 10
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 11
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 13 Column: 13
AVS: Identifier: pi
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 14
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 13 Column: 18
AVS: Constant: 1000.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 13 Column: 19
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 13 Column: 20
AVS: Identifier: d
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 21
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 13 Column: 24
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 25
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 13 Column: 26
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 27
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 13 Column: 29
AVS: Constant: 30.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 1 12
Entering state 27
Reading a token: 
Line: 13 Column: 30
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 13 Column: 31
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 32
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Next token is token '+' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 13 Column: 33
AVS: Identifier: u
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 13 Column: 34
AVS: Punctuator: '%'
Next token is token '%' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Next token is token '%' ()
Shifting token '%', Entering state 25
Reading a token: 
Line: 13 Column: 36
AVS: Constant: 30.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12 27 21 33 25
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21 33 25
Entering state 37
Reducing stack by rule 14 (line 48), expr '%' expr -> expr
PP: %
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Reading a token: 
Line: 13 Column: 37
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 13 Column: 39
AVS: Constant: 0.100000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12 27 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Reading a token: 
Line: 13 Column: 40
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 13 Column: 41
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 14 Column: 1
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 14 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 14 Column: 5
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 14 Column: 6
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 14 Column: 7
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 14 Column: 8
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 14 Column: 10
AVS: Identifier: tt
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 14 Column: 11
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 14 Column: 13
AVS: Constant: 0.200000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12 27 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Reading a token: 
Line: 14 Column: 14
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 14 Column: 15
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 14 Column: 16
AVS: Identifier: d
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 14 Column: 17
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 15 Column: 1
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 15 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 15 Column: 5
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 15 Column: 6
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 15 Column: 7
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 15 Column: 8
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 15 Column: 10
AVS: Identifier: tt
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 15 Column: 11
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 15 Column: 13
AVS: Constant: 0.200000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 1 12 27 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Reading a token: 
Line: 15 Column: 14
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 15 Column: 15
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 15 Column: 16
AVS: Identifier: d
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 15 Column: 17
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 16 Column: 2
AVS: Identifier: z1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 16 Column: 3
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 16 Column: 6
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 16 Column: 7
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 16 Column: 8
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 16 Column: 9
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 16 Column: 11
AVS: Identifier: pi
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 16 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 16 Column: 14
AVS: Identifier: tt
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 16 Column: 15
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12 27 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12 27 21
Entering state 33
Next token is token ')' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 16 Column: 16
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 16 Column: 18
AVS: Constant: 0.300000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 16 Column: 19
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 16 Column: 20
AVS: Identifier: u
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 16 Column: 21
AVS: Punctuator: '%'
Next token is token '%' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token '%' ()
Shifting token '%', Entering state 25
Reading a token: 
Line: 16 Column: 22
AVS: Constant: 3.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 25
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 25
Entering state 37
Reducing stack by rule 14 (line 48), expr '%' expr -> expr
PP: %
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 16 Column: 23
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 16 Column: 25
AVS: Constant: 0.400000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 16 Column: 26
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 17 Column: 1
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 17 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 17 Column: 3
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 17 Column: 4
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 17 Column: 6
AVS: Identifier: z1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 17 Column: 7
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 18 Column: 1
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 18 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 18 Column: 3
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 18 Column: 4
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 18 Column: 6
AVS: Identifier: z1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 18 Column: 7
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 19 Column: 3
AVS: Identifier: red
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 19 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 19 Column: 5
AVS: Identifier: u
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 19 Column: 6
AVS: Punctuator: '%'
Next token is token '%' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '%' ()
Shifting token '%', Entering state 25
Reading a token: 
Line: 19 Column: 7
AVS: Constant: 3.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 25
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 25
Entering state 37
Reducing stack by rule 14 (line 48), expr '%' expr -> expr
PP: %
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 19 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 19 Column: 10
AVS: Constant: 0.500000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 19 Column: 11
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 19 Column: 14
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 19 Column: 15
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 19 Column: 16
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 19 Column: 17
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 19 Column: 18
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 19 Column: 20
AVS: Constant: 0.100000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 19 Column: 21
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 20 Column: 4
AVS: Identifier: blue
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 20 Column: 5
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 20 Column: 6
AVS: Constant: 1.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 20 Column: 7
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 20 Column: 10
AVS: Identifier: red
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 20 Column: 11
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 21 Column: 5
AVS: Identifier: green
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 21 Column: 6
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 21 Column: 8
AVS: Constant: 0.600000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 21 Column: 9
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 23 Column: 1
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 23 Column: 4
AVS: Identifier: xp
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 5
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 23 Column: 6
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 6
Reading a token: 
Line: 23 Column: 7
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 6
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 6
Entering state 15
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 9
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 10
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 6 15 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 6 15 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 6
Entering state 15
Next token is token ')' ()
Shifting token ')', Entering state 29
Reducing stack by rule 18 (line 52), '(' expr ')' -> expr
PP: (expr)
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 23 Column: 11
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 14
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 15
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 23 Column: 17
AVS: Identifier: p2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 18
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 19
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 20
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 22
AVS: Constant: 31.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Reading a token: 
Line: 23 Column: 23
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 23 Column: 24
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 23 Column: 25
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 26
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 23 Column: 28
AVS: Identifier: yp
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 29
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 23 Column: 30
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 6
Reading a token: 
Line: 23 Column: 31
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 32
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 6
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 6
Entering state 15
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 33
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 34
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 6 15 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 6 15 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 6
Entering state 15
Next token is token ')' ()
Shifting token ')', Entering state 29
Reducing stack by rule 18 (line 52), '(' expr ')' -> expr
PP: (expr)
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 23 Column: 35
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 38
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 39
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 23 Column: 41
AVS: Identifier: p2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 42
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 43
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 23 Column: 44
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 23 Column: 46
AVS: Constant: 31.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23 1 12 27 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 27
Reading a token: 
Line: 23 Column: 47
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 21 33 23 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 23 Column: 48
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 24 Column: 3
AVS: Identifier: red
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 24 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 24 Column: 7
AVS: Constant: 1.500000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 24 Column: 8
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 24 Column: 9
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 24 Column: 10
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 24 Column: 11
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 24 Column: 12
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22 34 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22 34 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 24 Column: 17
AVS: Identifier: green
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 24 Column: 18
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 24 Column: 19
AVS: Constant: 1.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 24 Column: 20
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 24 Column: 21
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 24 Column: 22
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 24 Column: 26
AVS: Identifier: blue
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 24 Column: 27
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 24 Column: 28
AVS: Constant: 1.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 24 Column: 29
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 24 Column: 30
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 24 Column: 31
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 26 Column: 1
AVS: Identifier: d
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 26 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 26 Column: 3
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 26 Column: 4
AVS: Punctuator: '/'
Next token is token '/' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 26 Column: 5
AVS: Constant: 2.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 26 Column: 6
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 27 Column: 1
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 27 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 27 Column: 3
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 27 Column: 4
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 27 Column: 5
AVS: Identifier: p
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 27 Column: 6
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 27 Column: 8
AVS: Constant: 60.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 27 Column: 9
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 28 Column: 1
AVS: Identifier: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 28 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 28 Column: 5
AVS: Identifier: cos
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 28 Column: 6
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 28 Column: 7
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 28 Column: 8
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 28 Column: 9
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 28 Column: 10
AVS: Identifier: d
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 28 Column: 11
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 29 Column: 1
AVS: Identifier: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 29 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 29 Column: 5
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 29 Column: 6
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 29 Column: 7
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 29 Column: 8
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 29 Column: 9
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 29 Column: 10
AVS: Identifier: d
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 29 Column: 11
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 30 Column: 3
AVS: Identifier: lig
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 30 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 30 Column: 7
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 30 Column: 8
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 30 Column: 9
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 30 Column: 10
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 30 Column: 11
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 30 Column: 16
AVS: Identifier: above
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 30 Column: 17
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 30 Column: 20
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 30 Column: 21
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 30 Column: 22
AVS: Identifier: r
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 30 Column: 23
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 23 1 12 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 23 1 12 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 23 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12
Entering state 27
Reading a token: 
Line: 30 Column: 24
AVS: Punctuator: ','
Next token is token ',' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 30 23 1 12
Entering state 28
Next token is token ',' ()
Shifting token ',', Entering state 39
Reading a token: 
Line: 30 Column: 25
AVS: Constant: 0.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23 1 12 28 39
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23 1 12 28 39
Entering state 40
Reading a token: 
Line: 30 Column: 26
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 21 (line 58), fn_expr ',' expr -> fn_expr
Stack now 0 8 10 18 30 23 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 30 Column: 27
AVS: Punctuator: '/'
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 30 Column: 28
AVS: Constant: 3.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 30 Column: 29
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 31 Column: 4
AVS: Identifier: blue
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 31 Column: 5
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 31 Column: 6
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 6
Reading a token: 
Line: 31 Column: 7
AVS: Constant: 1.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 6
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 6
Entering state 15
Reading a token: 
Line: 31 Column: 8
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 31 Column: 9
AVS: Identifier: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 31 Column: 10
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 6 15 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 6 15 22
Entering state 34
Next token is token ')' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18 6
Entering state 15
Next token is token ')' ()
Shifting token ')', Entering state 29
Reducing stack by rule 18 (line 52), '(' expr ')' -> expr
PP: (expr)
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 31 Column: 11
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 31 Column: 14
AVS: Identifier: lig
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 31 Column: 15
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 32 Column: 5
AVS: Identifier: green
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 32 Column: 6
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 32 Column: 10
AVS: Identifier: blue
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 32 Column: 11
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 33 Column: 3
AVS: Identifier: red
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 33 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 33 Column: 8
AVS: Identifier: sqrt
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 33 Column: 9
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 33 Column: 13
AVS: Identifier: blue
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 33 Column: 14
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 33 Column: 15
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 33 Column: 16
AVS: Constant: 2.000000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 33 Column: 17
AVS: Punctuator: '-'
Next token is token '-' ()
Shifting token '-', Entering state 22
Reading a token: 
Line: 33 Column: 20
AVS: Identifier: lig
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 33 Column: 21
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 22
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 22
Entering state 34
Next token is token ';' ()
Reducing stack by rule 11 (line 45), expr '-' expr -> expr
PP: -
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 35 Column: 1
AVS: Identifier: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 35 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 35 Column: 3
AVS: Identifier: h
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 35 Column: 4
AVS: Punctuator: '/'
Next token is token '/' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 35 Column: 5
AVS: Identifier: w
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 35 Column: 6
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 35 Column: 10
AVS: Constant: 1.050000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 35 Column: 11
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 36 Column: 3
AVS: Identifier: fx1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 36 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 36 Column: 7
AVS: Identifier: fx1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 36 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 36 Column: 11
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 36 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 36 Column: 15
AVS: Identifier: rx1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 36 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 36 Column: 19
AVS: Identifier: fy1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 36 Column: 20
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 36 Column: 23
AVS: Identifier: fy1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 36 Column: 24
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 36 Column: 27
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 36 Column: 28
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 36 Column: 31
AVS: Identifier: ry1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 36 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 37 Column: 3
AVS: Identifier: fx2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 37 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 37 Column: 7
AVS: Identifier: fx2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 37 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 37 Column: 11
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 37 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 37 Column: 15
AVS: Identifier: rx2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 37 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 37 Column: 19
AVS: Identifier: fy2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 37 Column: 20
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 37 Column: 23
AVS: Identifier: fy2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 37 Column: 24
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 37 Column: 27
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 37 Column: 28
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 37 Column: 31
AVS: Identifier: ry2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 37 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 38 Column: 3
AVS: Identifier: fx3
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 38 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 38 Column: 7
AVS: Identifier: fx3
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 38 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 38 Column: 11
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 38 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 38 Column: 15
AVS: Identifier: rx3
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 38 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 38 Column: 19
AVS: Identifier: fy3
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 38 Column: 20
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 38 Column: 23
AVS: Identifier: fy3
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 38 Column: 24
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 38 Column: 27
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 38 Column: 28
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 38 Column: 31
AVS: Identifier: ry3
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 38 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 39 Column: 3
AVS: Identifier: fx4
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 39 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 39 Column: 7
AVS: Identifier: fx4
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 39 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 39 Column: 11
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 39 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 39 Column: 15
AVS: Identifier: rx4
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 39 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 39 Column: 19
AVS: Identifier: fy4
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 39 Column: 20
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 39 Column: 23
AVS: Identifier: fy4
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 39 Column: 24
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 39 Column: 27
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 39 Column: 28
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 39 Column: 31
AVS: Identifier: ry4
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 39 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 40 Column: 3
AVS: Identifier: fx5
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 40 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 40 Column: 7
AVS: Identifier: fx5
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 40 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 40 Column: 11
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 40 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 40 Column: 15
AVS: Identifier: rx5
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 40 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 40 Column: 19
AVS: Identifier: fy5
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 40 Column: 20
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 40 Column: 23
AVS: Identifier: fy5
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 40 Column: 24
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 40 Column: 27
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 40 Column: 28
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 40 Column: 31
AVS: Identifier: ry5
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 40 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 41 Column: 3
AVS: Identifier: fx6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 41 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 41 Column: 7
AVS: Identifier: fx6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 41 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 41 Column: 11
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 41 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 41 Column: 15
AVS: Identifier: rx6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 41 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 41 Column: 19
AVS: Identifier: fy6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 41 Column: 20
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 41 Column: 23
AVS: Identifier: fy6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 41 Column: 24
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 41 Column: 27
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 41 Column: 28
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 41 Column: 31
AVS: Identifier: ry6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 41 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 42 Column: 3
AVS: Identifier: fx7
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 42 Column: 4
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 42 Column: 7
AVS: Identifier: fx7
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 42 Column: 8
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 42 Column: 11
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 42 Column: 12
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 42 Column: 15
AVS: Identifier: rx7
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 42 Column: 16
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 42 Column: 19
AVS: Identifier: fy7
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 42 Column: 20
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 42 Column: 23
AVS: Identifier: fy7
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 42 Column: 24
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 42 Column: 27
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 42 Column: 28
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 42 Column: 31
AVS: Identifier: ry7
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 42 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 43 Column: 2
AVS: Identifier: am
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 43 Column: 3
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 43 Column: 5
AVS: Identifier: am
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 43 Column: 6
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 43 Column: 9
AVS: Constant: 0.900000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 43 Column: 10
AVS: Punctuator: '+'
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 43 Column: 13
AVS: Identifier: amc
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 43 Column: 14
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 43 Column: 17
AVS: Constant: 0.100000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21 33 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21 33 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 43 Column: 18
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 45 Column: 1
AVS: Identifier: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 2
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 45 Column: 3
AVS: Identifier: h
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 4
AVS: Punctuator: '/'
Next token is token '/' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '/' ()
Shifting token '/', Entering state 24
Reading a token: 
Line: 45 Column: 5
AVS: Identifier: w
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 6
AVS: Punctuator: '*'
Next token is token '*' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 24
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 24
Entering state 36
Reducing stack by rule 13 (line 47), expr '/' expr -> expr
PP: /
Stack now 0 8 10 18
Entering state 30
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 45 Column: 10
AVS: Constant: 1.050000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 45 Column: 11
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 45 Column: 14
AVS: Identifier: mxs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 15
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 45 Column: 18
AVS: Identifier: mxs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 19
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 45 Column: 20
AVS: Identifier: g
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 21
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 45 Column: 24
AVS: Identifier: mys
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 25
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 45 Column: 28
AVS: Identifier: mys
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 29
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 45 Column: 31
AVS: Identifier: g2
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 32
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 45 Column: 34
AVS: Identifier: mx
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 35
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 45 Column: 38
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 39
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 45 Column: 42
AVS: Identifier: mxs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 43
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 45 Column: 44
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 45 Column: 46
AVS: Constant: 0.800000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 45 Column: 47
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 45 Column: 49
AVS: Identifier: my
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 50
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 45 Column: 53
AVS: Identifier: sin
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 54
AVS: Punctuator: '('
Next token is token '(' ()
Shifting token '(', Entering state 12
Reading a token: 
Line: 45 Column: 57
AVS: Identifier: mys
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 58
AVS: Punctuator: ')'
Next token is token ')' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18 1 12
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 1 12
Entering state 27
Next token is token ')' ()
Reducing stack by rule 20 (line 57), expr -> fn_expr
Stack now 0 8 10 18 1 12
Entering state 28
Next token is token ')' ()
Shifting token ')', Entering state 38
Reducing stack by rule 24 (line 64), IDENTIFIER '(' fn_expr ')' -> primary
PP: function '(' ')'
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 45 Column: 59
AVS: Punctuator: '*'
Next token is token '*' ()
Shifting token '*', Entering state 23
Reading a token: 
Line: 45 Column: 61
AVS: Constant: 0.800000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 23
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 23
Entering state 35
Reducing stack by rule 12 (line 46), expr '*' expr -> expr
PP: *
Stack now 0 8 10 18
Entering state 30
Reading a token: 
Line: 45 Column: 62
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
Line: 45 Column: 63
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 64
AVS: Punctuator: '='
Next token is token '=' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8
Entering state 10
Next token is token '=' ()
Shifting token '=', Entering state 18
Reading a token: 
Line: 45 Column: 65
AVS: Identifier: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER, Entering state 1
Reading a token: 
Line: 45 Column: 66
AVS: Punctuator: '+'
Next token is token '+' ()
Reducing stack by rule 23 (line 63), IDENTIFIER -> primary
PP: identifier
Stack now 0 8 10 18
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18
Entering state 30
Next token is token '+' ()
Shifting token '+', Entering state 21
Reading a token: 
Line: 45 Column: 68
AVS: Constant: 0.100000
Next token is token CONSTANT ()
Shifting token CONSTANT, Entering state 2
Reducing stack by rule 22 (line 62), CONSTANT -> primary
PP: constant
Stack now 0 8 10 18 30 21
Entering state 11
Reducing stack by rule 7 (line 41), primary -> expr
Stack now 0 8 10 18 30 21
Entering state 33
Reading a token: 
Line: 45 Column: 69
AVS: Punctuator: ';'
Next token is token ';' ()
Reducing stack by rule 10 (line 44), expr '+' expr -> expr
PP: +
Stack now 0 8 10 18
Entering state 30
Next token is token ';' ()
Reducing stack by rule 17 (line 51), expr '=' expr -> expr
PP: =
Stack now 0 8
Entering state 10
Next token is token ';' ()
Shifting token ';', Entering state 26
Reducing stack by rule 6 (line 38), expr ';' -> statement
PP: expr ;
Stack now 0 8
Entering state 17
Reducing stack by rule 4 (line 33), statement_list statement -> statement_list
Stack now 0
Entering state 8
Reading a token: 
AVS: EOF
Now at end of input.
Reducing stack by rule 1 (line 27), statement_list -> translation_unit
STATEMENT: (nil)
Stack now 0
Entering state 7
Now at end of input.
